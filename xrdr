#!/bin/bash
# Author: Philipp Schmitt
# Version: 2.1.1
# Dependencies: xrandr awk sed dzen2

CONFIG_FILE='/etc/xrdr.conf'
USER_CONFIG_FILE="$HOME/.config/xrdr/xrdr.conf"
HOOK_FILE='/etc/conf.d/xrdr/xrdr.hook'
USER_HOOK_FILE="$HOME/.config/xrdr/xrdr.hook"

[[ -r $USER_CONFIG_FILE ]] && . $USER_CONFIG_FILE || ( [[ -r $CONFIG_FILE ]] && . $CONFIG_FILE )
if [[ -r $USER_HOOK_FILE ]]; then
    HOOK=$USER_HOOK_FILE
elif [[ -r $HOOK_FILE ]]; then
    HOOK=$HOOK_FILE
fi

function check_screen_variables() {
    [[ -n "$PRIMARY_SCREEN" ]] && [[ "${SCREENS[@]}" =~ "$PRIMARY_SCREEN" ]] && local first_screen_ok=0
    [[ -n "$SECONDARY_SCREEN" ]] && [[ "${SCREENS[@]}" =~ "$SECONDARY_SCREEN" ]] && local second_screen_ok=0
    [[ -n "$TERTIARY_SCREEN" ]] && [[ "${SCREENS[@]}" =~ "$TERTIARY_SCREEN" ]] && local third_screen_ok=0
    case ${#SCREENS[@]} in
        3)
            [[ -n "$first_screen_ok" ]] && [[ -n "$second_screen_ok" ]] && [[ -n "$third_screen_ok" ]]
            ;;
        2)
            [[ -n "$first_screen_ok" ]] && [[ -n "$second_screen_ok" ]]
            ;;
        1)
            [[ -n "$first_screen_ok" ]]
            ;;
    esac
}

function check_display_input() {
    [[ $1 -ge ${#SCREENS[@]} ]] && exit 1 || return $(( $1 - 1 ))
}

function guess_screens() {
    PRIMARY_SCREEN=${SCREENS[0]}
    SECONDARY_SCREEN=${SCREENS[1]}
    TERTIARY_SCREEN=${SCREENS[2]}
}

function count() {
    echo ${#SCREENS[@]}
    exit 0
}

function identify() {
    local x_res y_res screen screen_num
    for screen in ${!SCREENS[@]}; do
        screen_num=$(( $screen + 1 ))
        read x_res y_res _ _ <<< $(_res $screen)
        echo "Screen $screen_num (${SCREENS[$screen]}) - ${x_res}x${y_res}" | dzen2 -p 2 -xs $screen_num -bg red -w $x_res -h $y_res
    done
    exit 0
}

# This function returns ${XRES}x${YRES}+${XPOS}+${YPOS}
function _res() {
    if [[ $1 -ge ${#SCREENS[@]} ]]; then 
        exit 1 
    fi
    xrandr | grep ${SCREENS[$1]} | sed -n 's/.* \([0-9]\+x[0-9]\++[0-9]\++[0-9]\+\) .*/\1/p' | sed 's/x/ /g;s/+/ /g' 
}

function resolution() {
    local x_res y_res 
    read x_res y_res _ _ <<< $(_res $1)
    echo $x_res - $y_res
}

function width() {
    _res $1 | awk '{ print $1 }' 
}

function height() {
    _res $1 | awk '{ print $2 }' 
}

function is_vertical() {
    # TODO awk '{ print $4 }' will only work if $1 != primary screen
    local vert=$(xrandr | grep ${SCREENS[$1]} | awk '{ print $4}')
    return $([[ $vert == "right" || $ver = "left" ]])
}

function save_conf() {
    mkdir -p $(dirname $USER_CONFIG_FILE)
    echo 'PRIMARY_SCREEN="'$PRIMARY_SCREEN'"' > $USER_CONFIG_FILE
    echo 'SECONDARY_SCREEN="'$SECONDARY_SCREEN'"' >> $USER_CONFIG_FILE
    echo 'TERTIARY_SCREEN="'$TERTIARY_SCREEN'"' >> $USER_CONFIG_FILE
}

function copy() {
    disconnect
    xrandr --output $SECONDARY_SCREEN --auto \
           --output $PRIMARY_SCREEN --same-as $SECONDARY_SCREEN --primary
}

function extend() {
    disconnect
    case ${#SCREENS[@]} in
        2)
            xrandr --output $PRIMARY_SCREEN --primary --auto \
                   --output $SECONDARY_SCREEN --auto --right-of $PRIMARY_SCREEN
            ;;
        3)
            xrandr --output $PRIMARY_SCREEN --primary --auto \
                   --output $SECONDARY_SCREEN --auto --left-of $PRIMARY_SCREEN \
                   --output $TERTIARY_SCREEN --auto --right-of $PRIMARY_SCREEN
            ;;
    esac
}

function primary_only() {
    disconnect
    case ${#SCREENS[@]} in
        3)
            xrandr --output $TERTIARY_SCREEN --off
            ;&
        2)
            xrandr --output $SECONDARY_SCREEN --off
            ;;
    esac
    xrandr --output $PRIMARY_SCREEN --auto --primary
}

function secondary_only() {
    [[ -n "$SECONDARY_SCREEN" ]] || exit 1
    disconnect
    xrandr --output $PRIMARY_SCREEN --off \
           --output $TERTIARY_SCREEN --off \
           --output $SECONDARY_SCREEN --auto --primary
}

function tertiary_only() {
    [[ -n "$TERTIARY_SCREEN" ]] || exit 1
    disconnect
    xrandr --output $PRIMARY_SCREEN --off \
           --output $SECONDARY_SCREEN --off \
           --output $TERTIARY_SCREEN --auto --primary
}

function disconnect() {
    xrandr --auto
}

function toggle() {
    [[ ${#SCREENS[@]} -gt 1 ]] && primary_only || extend
}

function auto() {
    [[ ${#SCREENS[@]} -gt 1 ]] && extend || primary_only
}

function hook() {
    [[ -n $HOOK ]] && sh $HOOK
}

while getopts 'd:x:' opt ; do
    case $opt in
         d)
            export DISPLAY="$OPTARG"
            ;;
        x)
            export XAUTHORITY="$OPTARG"
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            exit 1
            ;;
        :)
            echo "Option -$OPTARG requires an argument." >&2
            exit 1
            ;;
    esac
done

shift $(($OPTIND - 1))

[[ -z "$DISPLAY" ]] && export DISPLAY=:0
[[ -z "$XAUTHORITY" ]] && export XAUTHORITY=$HOME/.Xauthority

SCREENS=($(xrandr | grep ' connected' | awk '{ print $1 }' | tr '\n' ' ' ))

check_screen_variables || guess_screens
save_conf

case "$1" in
    count|c)
        count
        ;;
    primary|p)
        primary_only
        ;;
    extend|e)
        extend
        ;;
    copy|cp)
        copy
        ;;
    secondary|s)
        secondary_only
        ;;
    tertiary|ter)
        tertiary_only
        ;;
    toggle|t)
        toggle
        ;;
    identify|i)
        identify
        ;;
    res|r)
        [[ -n $2 ]] && { resolution $(( $2 - 1 )); exit 0; } || exit 1
        ;;
    height|h)
        [[ -n $2 ]] && { height $(( $2 - 1 )); exit 0; } || exit 1
        ;;
    width|w)
        [[ -n $2 ]] && { width $(( $2 - 1 )); exit 0; } || exit 1
        ;;
    vertical|v)
        [[ -n $2 ]] && exit $(is_vertical $(( $2 - 1 ))) || exit 1
        ;;
    *)
        auto
        ;;
esac

hook
