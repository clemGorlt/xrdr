#!/bin/bash
# Author: Philipp Schmitt
# Version: 2.3.0
# Dependencies: xrandr awk sed dzen2

CONFIG_FILE='/etc/xrdr.conf'
USER_CONFIG_FILE="$HOME/.config/xrdr/xrdr.conf"
HOOK_FILE='/etc/conf.d/xrdr/xrdr.hook'
USER_HOOK_FILE="$HOME/.config/xrdr/xrdr.hook"

[[ -r $USER_CONFIG_FILE ]] && . $USER_CONFIG_FILE || ( [[ -r $CONFIG_FILE ]] && . $CONFIG_FILE )
if [[ -r $USER_HOOK_FILE ]]; then
    HOOK=$USER_HOOK_FILE
elif [[ -r $HOOK_FILE ]]; then
    HOOK=$HOOK_FILE
fi

function usage() {
    echo "Usage: $1 [extend|copy|primary|secondary|tertiary] LAYOUT_FILE"
    echo "extend: Extend displays (3 displays max)"
    echo "copy: Copy output (2 displays max)"
    echo "primary: Disable all except primary display"
    echo "secondary: Disable all except second display"
    echo "tertiary: Disable all except third display"
    echo "LAYOUT_FILE: Layout file"
}

function parse_config() {
    [[ -n $VERBOSE ]] && echo "Applying layout from $1"
    [[ -r $1 ]] || { echo "File not readable"; exit 1; }

    local valid_config="$(sed '/^#\|^$/d;s/|//g;s/#.*//' $1)"
    local rows=$(wc -l <<< "$valid_config")
    local row=0 row_content desired_screens=0

    for row in $(seq $rows); do
        row_content=$(sed -n ${row}p <<< "$valid_config")
        eval "local config_${row}=( $row_content )"
        eval "let desired_screens=desired_screens+\${#config_$row[@]}"
        eval "local config[$row]=config_${row}"
    done

    [[ $desired_screens -gt ${#SCREENS[@]} ]] && { echo "There aren't that many screens attached"; exit 1; }

    local config_row config_row_index=0 _screen screen screen_index xrandr_cmd="xrandr --output" previous_screen
    for config_row in $(seq ${#config[@]}); do
        eval "row_content=(\${config_$config_row[*]})"
        let config_row_index++
        for _screen in "${row_content[@]}"; do
            screen_index=$(sed 's/[^0-9]*//g' <<< "$_screen")
            screen_attributes=$(sed 's/[0-9]*//g' <<< "$_screen")
            screen=${SCREENS[$(( $screen_index - 1 ))]}
            xrandr_cmd="$xrandr_cmd $screen --auto"
            case $screen_attributes in
                r)  xrandr_cmd="$xrandr_cmd --rotate right"    ;;
                l)  xrandr_cmd="$xrandr_cmd --rotate left"     ;;
                i)  xrandr_cmd="$xrandr_cmd --rotate inverted" ;;
                n)  xrandr_cmd="$xrandr_cmd --rotate normal"   ;;
                \*) xrandr_cmd="$xrandr_cmd --primary"         ;;
            esac
            if [[ $_screen == ${row_content[0]} ]]; then
                if [[ $config_row_index -ne 1 ]]; then
                    xrandr_cmd="$xrandr_cmd --below $first_screen"
                fi
                first_screen=$screen
            else
                xrandr_cmd="$xrandr_cmd --right-of $previous_screen"
            fi
            if [[ $_screen != ${row_content[${#row_content[@]} - 1]} \
               || $config_row_index -lt ${#config[@]} ]]; then
                xrandr_cmd="$xrandr_cmd --output"
                previous_screen=$screen
            fi
        done
    done

    [[ -n $VERBOSE ]] && echo $xrandr_cmd
    [[ -z $DRY_RUN ]] && {
        disconnect
        $xrandr_cmd
    } || echo $xrandr_cmd
    exit 0
}

function _check_screen_variables() {
    [[ -n "$PRIMARY_SCREEN" ]] && [[ "${SCREENS[@]}" =~ "$PRIMARY_SCREEN" ]] && local first_screen_ok=0
    [[ -n "$SECONDARY_SCREEN" ]] && [[ "${SCREENS[@]}" =~ "$SECONDARY_SCREEN" ]] && local second_screen_ok=0
    [[ -n "$TERTIARY_SCREEN" ]] && [[ "${SCREENS[@]}" =~ "$TERTIARY_SCREEN" ]] && local third_screen_ok=0
    case ${#SCREENS[@]} in
        3)
            [[ -n "$first_screen_ok" ]] && [[ -n "$second_screen_ok" ]] && [[ -n "$third_screen_ok" ]]
            ;;
        2)
            [[ -n "$first_screen_ok" ]] && [[ -n "$second_screen_ok" ]]
            ;;
        1)
            [[ -n "$first_screen_ok" ]]
            ;;
    esac
}

function check_display_input() {
    [[ $1 -ge ${#SCREENS[@]} ]] && exit 1 || return $(( $1 - 1 ))
}

function _check_rotation() {
    [[ $1 == "left" ]] \
    || \
    [[ $1 == "right" ]] \
    || \
    [[ $1 == "normal" ]] \
    || \
    [[ $1 == "inverted" ]]
}

function _guess_screens() {
    PRIMARY_SCREEN=${SCREENS[0]}
    SECONDARY_SCREEN=${SCREENS[1]}
    TERTIARY_SCREEN=${SCREENS[2]}
}

function count() {
    echo ${#SCREENS[@]}
    exit 0
}

function identify() {
    local x_res y_res screen screen_num
    for screen in ${!SCREENS[@]}; do
        screen_num=$(( $screen + 1 ))
        read x_res y_res _ _ <<< $(_res $screen)
        echo "Screen $screen_num (${SCREENS[$screen]}) - ${x_res}x${y_res}" | dzen2 -p 2 -xs $screen_num -bg red -w $x_res -h $y_res
    done
    exit 0
}

# This function returns ${XRES}x${YRES}+${XPOS}+${YPOS}
function _res() {
    if [[ $1 -ge ${#SCREENS[@]} ]]; then
        echo lol
        exit 1
    fi
    xrandr | grep ${SCREENS[$1]} | sed -e 's/.* \([0-9]\+x[0-9]\++[0-9]\++[0-9]\+\) .*/\1/' -e 's/x/ /g;s/+/ /g'
}

function resolution() {
    local x_res y_res
    read x_res y_res _ _ <<< $(_res $1)
    echo $x_res - $y_res
}

function width() {
    _res $1 | awk '{ print $1 }'
}

function height() {
    _res $1 | awk '{ print $2 }'
}

function is_vertical() {
    # TODO awk '{ print $4 }' will only work if $1 != primary screen
    local vert=$(xrandr | grep ${SCREENS[$1]} | awk '{ print $4}')
    exit $([[ $vert == "right" || $vert == "left" ]])
}

function _save_conf() {
    [[ -n $VERBOSE ]] && echo "Writing config file"
    mkdir -p $(dirname $USER_CONFIG_FILE)
    echo 'PRIMARY_SCREEN="'$PRIMARY_SCREEN'"' > $USER_CONFIG_FILE
    echo 'SECONDARY_SCREEN="'$SECONDARY_SCREEN'"' >> $USER_CONFIG_FILE
    echo 'TERTIARY_SCREEN="'$TERTIARY_SCREEN'"' >> $USER_CONFIG_FILE
    [[ -n $VERBOSE ]] && cat $USER_CONFIG_FILE
}

function copy() {
    disconnect
    xrandr --output $SECONDARY_SCREEN --auto \
           --output $PRIMARY_SCREEN --same-as $SECONDARY_SCREEN --primary
}

function extend() {
    disconnect
    case ${#SCREENS[@]} in
        2)
            xrandr --output $PRIMARY_SCREEN --primary --auto \
                   --output $SECONDARY_SCREEN --auto --right-of $PRIMARY_SCREEN
            ;;
        3)
            xrandr --output $PRIMARY_SCREEN --primary --auto \
                   --output $SECONDARY_SCREEN --auto --left-of $PRIMARY_SCREEN \
                   --output $TERTIARY_SCREEN --auto --right-of $PRIMARY_SCREEN
            ;;
    esac
}

function primary_only() {
    disconnect
    case ${#SCREENS[@]} in
        3)
            xrandr --output $TERTIARY_SCREEN --off
            ;&
        2)
            xrandr --output $SECONDARY_SCREEN --off
            ;;
    esac
    xrandr --output $PRIMARY_SCREEN --auto --primary
}

function secondary_only() {
    [[ -n "$SECONDARY_SCREEN" ]] || exit 1
    disconnect
    xrandr --output $PRIMARY_SCREEN --off \
           --output $TERTIARY_SCREEN --off \
           --output $SECONDARY_SCREEN --auto --primary
}

function tertiary_only() {
    [[ -n "$TERTIARY_SCREEN" ]] || exit 1
    disconnect
    xrandr --output $PRIMARY_SCREEN --off \
           --output $SECONDARY_SCREEN --off \
           --output $TERTIARY_SCREEN --auto --primary
}

function rotate() {
    xrandr --output ${SCREENS[$1]} --rotate $2
}

function disconnect() {
    xrandr --auto
}

function toggle() {
    [[ ${#SCREENS[@]} -gt 1 ]] && primary_only || extend
}

function auto() {
    [[ ${#SCREENS[@]} -gt 1 ]] && extend || primary_only
}

function hook() {
    [[ -n $HOOK ]] && sh $HOOK
}

while getopts 'd:x:' opt ; do
    case $opt in
        d)
            export DISPLAY="$OPTARG"
            ;;
        x)
            export XAUTHORITY="$OPTARG"
            ;;
        v)
            VERBOSE=1
            ;;
        r)
            DRY_RUN=1
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            exit 1
            ;;
        :)
            echo "Option -$OPTARG requires an argument." >&2
            exit 1
            ;;
    esac
done

shift $(($OPTIND - 1))

[[ -z "$DISPLAY" ]] && export DISPLAY=:0
[[ -z "$XAUTHORITY" ]] && export XAUTHORITY=$HOME/.Xauthority

SCREENS=($(xrandr | sed -ne 's/\(.*\) connected.*/\1/p' | tr '\n' ' '))

_check_screen_variables || _guess_screens
_save_conf
case "$1" in
    auto|a)
        action=auto
        ;;
    count|c)
        count
        ;;
    primary|p)
        primary_only
        ;;
    extend|e)
        extend
        ;;
    copy|cp)
        copy
        ;;
    secondary|s)
        secondary_only
        ;;
    tertiary|ter)
        tertiary_only
        ;;
    toggle|t)
        toggle
        ;;
    rotate|r)
        action=rot
        ;;
    identify|i)
        identify
        ;;
    res|resolution)
        action=r
        ;;
    height|h)
        action=h
        ;;
    width|w)
        action=w
        ;;
    vertical|v)
        action=v
        ;;
    help|h)
        usage $(basename $0)
        exit 0
        ;;
    *)
        parse_config $1
        exit 0
        ;;
esac

[[ $# -eq 0 ]] && action=auto

[[ -n $action ]] && {
    [[ -n $2 ]] && {
        [[ $2 -gt ${#SCREENS[@]} || $2 -lt 0 ]] && {
            echo "Invalid index"
            exit 1
        } || {
            d=$(( $2 - 1 ))
        }
    }
    case $action in
        auto) auto ;;
        rot)
        _check_rotation $3 && {
            rotate $d $3
        } || exit 1
        ;;
        r) resolution $d  ;;
        w) width $d       ;;
        h) height $d      ;;
        v) is_vertical $d ;;
    esac
} || hook
